@model SKtimeManagement.ReportGraph
@*@{ 
    var id = Guid.NewGuid().ToString().Replace("-", "");
    var revenueID = Guid.NewGuid().ToString().Replace("-", "");
    var graph = Model;
    var stepWidth = graph.Warehouses.Count > 1 && graph.Warehouses.Count * 12 + 30 >= 60 ? graph.Warehouses.Count * 12 + 30 : 60;
    var stepCount = graph.Count;
    var width = stepCount * stepWidth;
    var height = 400;
    var step = 0;
    var multiply = 0;
    while (step * 10 < graph.Max)
    {
        step = (int)Math.Pow(10, multiply++);
    }
    while (graph.Max / step <= 5)
    {
        step /= 2;
    }
    var lines = new List<string>();
    var revenues = new List<string>();
    var spots = new List<string>();
    var names = new List<string[]>();
    var arcs = new List<string>();
    for (var i = 0; i < 10; i++)
    {
        lines.Add(String.Format("_{2}.moveTo(0, {1}); _{2}.lineTo({0}, {1});", width, height / 10 * i, id));
    }
    var count = 0;
    var addSpot = true;
    var red = Functions.Random.Next(50, 100);
    var green = Functions.Random.Next(50, 100);
    var blue = Functions.Random.Next(50, 100);
    var currentColor = "red";
    var arc = 0m;
    var total = graph.Revenues.Where(i => i.Warehouse.HasValue).Sum(i => i.Value);
    foreach (var wh in graph.Warehouses)
    {
        var index = 0;
        var color = String.Format("rgba({0}, {1}, {2}, 1)", red, green, blue);
        revenues.Add(String.Format("_{0}.fillStyle = \"{1}\"; ", id, color));
        var percentage = Math.Round(graph.Revenues.Where(i => i.Warehouse.HasValue && i.Warehouse.Value == wh.ID).Sum(i => i.Value) / total, 4);
        arcs.Add(String.Format("_{3}.beginPath();_{3}.moveTo(150, 150);_{3}.fillStyle = '{2}';_{3}.arc(150, 150, 150, {0} * 2 * Math.PI, {1} * 2 * Math.PI);_{3}.lineTo(150, 150);_{3}.fill();", arc, arc + percentage, color, revenueID));
        arc += percentage;
        names.Add(new string[] { String.Format("{0} (<span class=\"text-info\"><strong>{1}%</strong></span>)", wh.Name, Math.Round(percentage * 100, 2)), color });
        foreach (var revenue in graph.Revenues.Where(i => i.Warehouse.HasValue && i.Warehouse == wh.ID))
        {
            var cWidth = 12;
            var cHeight = Math.Round(revenue.Value / step * (height / 10), 2);
            var x = stepWidth * index + (stepWidth - graph.Warehouses.Count * cWidth) / 2 + count * cWidth;
            var y = height - cHeight;
            revenues.Add(String.Format("_{4}.fillRect({0}, {1}, {2}, {3}); ", x, y, cWidth, cHeight, id));
            if (addSpot)
            {
                spots.Add(String.Format("<span class=\"spot\" style=\"left: {0}px\">{1}</span>", width / stepCount * index + 13, revenue.Time.ToString(graph.TimeFormat)));
            }
            index++;
        }
        switch (currentColor)
        {
            case "red": red = 255 - red; currentColor = "green"; break;
            case "green": green = 255 - green; currentColor = "blue"; break;
            case "blue": blue = 255 - blue; currentColor = "red"; break;
            default: break;
        }
        addSpot = false;
        count++;
    }
}
<div class="flexible">
    <div class="w50">
        <div class="inline text-left" style="vertical-align: top;">
            @for (var i = 0; i < names.Count; i += 2)
            {
                var name = names[i];
                <div>
                    <div style="display: inline-block; width: 30px; height: 20px; background-color: @name[1]; margin: 0 10px; vertical-align: middle;"></div>
                    <span>@Html.Raw(name[0])</span>
                </div>
            }
        </div>
        <div class="inline text-left" style="vertical-align: top;">
            @for (var i = 1; i < names.Count; i += 2)
            {
                var name = names[i];
                <div>
                    <div style="display: inline-block; width: 30px; height: 20px; background-color: @name[1]; margin: 0 10px; vertical-align: middle;"></div>
                    <span>@Html.Raw(name[0])</span>
                </div>
            }
        </div>
    </div>
    <div id="percentage-graph-@revenueID" class="w50 text-center">
        <canvas width="300" height="300" style="background-color: #fff"></canvas>
        <p>Biểu đồ tỷ lệ từng kho</p>
        <script>
            var _@(revenueID) = $('#percentage-graph-@revenueID canvas')[0].getContext('2d');
            @Html.Raw(String.Join("", arcs))
        </script>
    </div>
</div>
<div id="@id" class="text-center" style="overflow: auto;">
    <div class="report-graph inline">
        <span id="x">
            @Html.Raw(String.Join("", spots))
        </span>
        <span id="y">
            @for (var i = 10; i >= 0; i--)
            {
                <span class="value" style="top: @((height / 10) * (10 - i) + 10)px; color: #0b4fa3">@((step * i).GetCurrencyShortString())</span>
            }
        </span>
        <canvas width="@width" height="@height" style="background-color: #fff"></canvas>
    </div>
</div>
<script>
    var _@id = $('#@id .report-graph canvas')[0].getContext('2d');
    _@(id).strokeStyle = "#b0b0b0";
    _@(id).lineWidth = 1;
    _@(id).beginPath();
    @String.Join("", lines)
    _@(id).stroke();

    @Html.Raw(String.Join("", revenues))
</script>*@
@{
    var chartID = Guid.NewGuid().ToString();
    var pieID = Guid.NewGuid().ToString();
    var graph = Model;
    var labels = new List<string>();
    var bars = new List<string>();
    var pieLabels = new List<string>();
    var pieValues = new List<decimal>();
    var pieColors = new List<string>();
    var names = new List<string[]>();
    var addLabel = true;
    var total = graph.Revenues.Where(i => i.Warehouse.HasValue).Sum(i => i.Value > 0 ? i.Value : 0);
    foreach (var wh in graph.Warehouses)
    {
        var color = Functions.RandomColor();
        pieLabels.Add(wh.Name);
        pieValues.Add(graph.Revenues.Where(i => i.Warehouse.HasValue && i.Warehouse.Value == wh.ID).Sum(i => i.Value > 0 ? i.Value : 0));
        pieColors.Add(color.ToWebString());
        var percentage = Math.Round(graph.Revenues.Where(i => i.Warehouse.HasValue && i.Warehouse.Value == wh.ID).Sum(i => i.Value > 0 ? i.Value : 0) / total, 4);
        names.Add(new string[] { String.Format("{0} (<span class=\"text-info\"><strong>{1}%</strong></span>)", wh.Name, Math.Round(percentage * 100, 2)), color.ToWebString() });
        var values = new List<int>();
        foreach (var revenue in graph.Revenues.Where(i => i.Warehouse.HasValue && i.Warehouse == wh.ID))
        {
            if (addLabel)
            {
                labels.Add(revenue.Time.ToString(graph.TimeFormat));
            }
            values.Add(Convert.ToInt32(revenue.Value));
        }
        bars.Add(String.Format(
            @"{{
                label: '{0}',
                data: [{1}],
                backgroundColor: '{2}',
                borderColor: '{3}',
                borderWidth: 1
            }}", wh.Name, String.Join(",", values), color.ToWebString(0.2), color.ToWebString()));
        addLabel = false;
    }
}
@if (Model.Type != ReportGraphType.SaleRelative)
{
    <div class="flexible">
        <div class="w50">
            @foreach (var name in names)
            {
                <div>
                    <div style="display: inline-block; width: 30px; height: 20px; background-color: @name[1]; margin: 0 10px; vertical-align: middle;"></div>
                    <span>@Html.Raw(name[0])</span>
                </div>
            }
        </div>
        <div class="w50">
            <div style="overflow: auto">
                <canvas id="@pieID" width="400" height="400"></canvas>
            </div>
        </div>
    </div>
}
<div style="overflow: auto">
    <canvas id="@chartID" width="1300" height="400"></canvas>
</div>
<script>
    var barCtx = document.getElementById("@chartID");
    var barChart = new Chart(barCtx, {
        type: 'bar',
        data: {
            labels: [@Html.Raw(String.Join(",", labels.Select(i => String.Format("'{0}'", i))))],
            datasets: [@Html.Raw(String.Join(",", bars))]
        },
        options: {
            responsive: false,
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });
</script>
@if (Model.Type != ReportGraphType.SaleRelative)
{
    <script>
        var pieCtx = document.getElementById("@pieID");
        var pieChart = new Chart(pieCtx, {
            type: 'pie',
            data: {
                labels: [@Html.Raw(String.Join(",", pieLabels.Select(i => String.Format("'{0}'", i))))],
                datasets: [{
                    data: [@Html.Raw(String.Join(",", pieValues.Select(i => Convert.ToInt32(i))))],
                    backgroundColor: [@Html.Raw(String.Join(",", pieColors.Select(i => String.Format("'{0}'", i))))]
                }]
            },
            options: {
                responsive: false
            }
        });
    </script>
}