@model SKtimeManagement.IncomeList
@{
    var id = Guid.NewGuid().ToString();
}
<div class="tabs">
    <div id="heads">
        <span class="active">Phiếu thu</span>
        <a href="@Url.Action("List", "Outcome")" target="_self" for="main-content" ptitle="Phiếu chi">Phiếu chi</a>
    </div>
</div>
@if (!String.IsNullOrEmpty(Model.Message))
{
    <div class="text-center">
        <i class="text-info">@Html.Raw(Model.Message)</i>
    </div>
}
<div class="flexible">
    <div class="w25">
        <div id="filter" class="group">
            <h3 class="head-line">Tìm kiếm</h3>
            <div id="content">
                <form action="@Url.Action("List", "Income")" method="post" for="main-content" ptitle="Phiếu thu">
                    <div>
                        <label>Kho:</label>
                        <select name="WarehouseID" data="@Url.Action("AuthorizedWarehouse", "Login")" value="@Model.Filter.WarehouseID">
                            <option>None</option>
                        </select>
                    </div>
                    <div>
                        <label>Nhân viên:</label>
                        <div class="inline">
                            <div id="search-employee" class="table-row">
                                <div><input type="text" placeholder="Tìm theo tên" /></div>
                                <div><span class="button small search"></span></div>
                            </div>
                            <span>
                                <select name="EmployeeID" data="@Url.Action("DataList", "Employee")" value="@Model.Filter.EmployeeID">
                                    <option value="">None</option>
                                </select>
                            </span>
                        </div>
                    </div>
                    <div>
                        <label>Mã phiếu:</label><input type="text" class="input" name="Code" value="@Model.Filter.Code" />
                    </div>
                    <div>
                        <label>Từ:</label>
                        <div class='input-group date'>
                            <input type='text' class="form-control input" name="From" value="@(Model.Filter.From.HasValue ? Model.Filter.From.Value.ToString(Constants.DateTimeString) : "")" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </div>
                    <div>
                        <label>Đến:</label>
                        <div class='input-group date'>
                            <input type='text' class="form-control input" name="To" value="@(Model.Filter.To.HasValue ? Model.Filter.To.Value.ToString(Constants.DateTimeString) : "")" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </div>
                    <div class="text-right">
                        <input type="submit" value="Tìm" url="@Url.Action("List", "Income")" class="search"/>
                        <a href="@Url.Action("Create", "Income" )" target="_self" class="button add" for="pop-up-content" ptitle="Phiếu thu">Tạo mới</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div class="w75">
        <div class="flexible">
            <div class="w25">
                <span>Tổng tiền: <span class="text-info">@Model.Data.Sum(i => i.Amount).GetCurrencyString()</span></span>
            </div>
            @foreach (var type in InOutType.List)
            {
                <div class="w25">
                    <span>@type: <span class="text-info">@Model.Data.Where(i => i.Type == type).Sum(i => i.Amount).GetCurrencyString()</span></span>
                </div>
            }
        </div>
        <span id="incomes-download" class="button save">Xuất Excel</span>
        <div id="income" class="tbl">
            <table id="income-table" data="@id" key="ID" view="@Url.Action("Detail", "Income", new { id = "{ID}" })" update="@Url.Action("Update", "Income", new { id = "{ID}" })" remove="@Url.Action("Remove", "Income", new { id = "{ID}" })" ptitle="Phiếu thu">
                <thead>
                    <tr>
                        <td width="110"></td>
                        <td name="Code"><div>Mã phiếu</div></td>
                        <td name="WarehouseName"><div>Kho</div></td>
                        <td name="EmployeeName"><div>Nhân viên</div></td>
                        <td name="SubmitDateString"><div>Ngày tạo</div></td>
                        <td name="AmountString" text="right"><div>Số tiền</div></td>
                        <td name="Type"><div>Phương thức</div></td>
                        <td name="Reason"><div>Lý do</div></td>
                        <td name="Note"><div>Ghi chú</div></td>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>
@{
    var scripts = new List<string>();
    if (Model.Data != null)
    {
        var jsonData = Html.JsonSerialize(Model.Data);
        scripts.Add("_TableFunctions.Data.push({" + String.Format("id: '{0}',data: JSON.parse('{1}', _TableFunctions.JsonParse)", id, jsonData) + "});");
    }
}
@Html.Raw(String.Format("<script>{0}</script>", String.Join("", scripts)))
<script>
    _TableFunctions.Init({ e: '#income' });
    _TableFunctions.RefreshData();
    $('#filter #search-employee .button').on('click', function () {
        var name = $('#filter #search-employee input').val(),
            url = '@Url.Action("Find", "Employee", new { id = "_Name" })',
            val = $('#filter select[name="EmployeeID"]').attr('value');
        if (name != '') {
            AjaxRequest({
                url: url.replace('_Name', name),
                success: function (data) {
                    if (data.list) {
                        var html = '<option value="">None</option>';
                        data.list.forEach(function (employee, index) {
                            html += '<option value="' + employee.ID + '" ' + (employee.ID.toString() == val ? 'selected' : '') + '>' + employee.Name + '</option>';
                        });
                        $('#filter select[name="EmployeeID"]').html(html);
                    }
                }
            });
        }
    });
    $('#incomes-download').on('click', function () {
        var formData = new FormData();
        $.each($('#filter form').serializeArray(), function (i, field) {
            //console.log(field.name + ', ' + field.value);
            formData.append(field.name, field.value);
        });
        AjaxRequest({
            url: '@Url.Action("Download", "Income")',
            data: formData,
            type: 'post',
            processData: false,
            success: function (data) {
                if (data.result) {
                    window.location = '@Url.Action("Download", "Income")';
                }
            }
        });
    });
</script>